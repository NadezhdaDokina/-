
АНАЛИЗ АЛГОРИТМА: сортировка выбором (Selection Sort)
Определение: Алгоритм, который делится на две зоны: первая зоны содержит уже отсортированные элементы, вторая — ещё неупорядоченные. На каждом шаге алгоритм ищет наименьший элемент в зоне неотсортированных элементов и помещает его в начало этой зоны, таким образом расширяя зону отсортированных элементов.
Анализ: Алгоритм сортировки выбором последовательно просматривает массив, отыскивает наименьший элемент и размещает его в начало текущей несортированной части. Процесс повторяется для оставшейся части массива до его полной сортировки. 
Временная сложность данного метода — O(n^2), что делает его малопригодным для обработки крупных объемов данных. Пространственная сложность алгоритма — O(1) благодаря минимальному объему дополнительной памяти, необходимой для работы.

АНАЛИЗ АЛГОРИТМА: сортировка обменом (пузырьком) (Bubble Sort)
Определение: это простой алгоритм сортировки, при которой соседние элементы массива попарно сравниваются и меняют места, если нарушают порядок. 
Анализ:алгоритм производит серию проходов по массиву, постепенно передвигая крупные элементы к концу. Чем больше проходов сделано, тем больше вероятность того, что массив уже отсортирован, позволяя завершить процедуру досрочно.
Данный алгоритм обладает временной сложностью O(n²) и пространственной сложностью O(1).

АНАЛИЗ АЛГОРИТМА: сортировка вставками (Insertion Sort)
Определение: это простой алгоритм сортировки, работающий следующим образом: перебираются элементы массива слева направо, и каждый элемент вставляется на своё правильное место среди ранее отсортированных элементов. Этот метод похож на процесс упорядочивания карт вручную.
Анализ:Каждый новый элемент сравнивается с предыдущими элементами, уже расположенными в правильном порядке, и помещается на свою соответствующую позицию среди ранее отсортированных значений. Таким образом, массив постепенно расширяется, пока все элементы не будут упорядочены согласно заданному критерию сравнения.
Временная сложность в худшем и среднем случаях составляет O(n²), но в наилучшем случае, когда массив уже отсортирован, достигается O(n)

АНАЛИЗ АЛГОРИТМА: Сортировка слиянием (Merge Sort)
Определение:это устойчивый алгоритм сортировки, основанный на принципе разделяй и властвуй. Главная идея заключается в рекурсивном делении массива на небольшие части, которые затем объединяются (сливаются) таким образом, чтобы результирующая последовательность была отсортирована.
Анализ:исходный массив разделяется на две  половины, каждая из которых отдельно сортируется посредством рекурсивного повторения процесса деления и сортировки. После завершения сортировки каждой отдельной половины производится объединение результатов путём последовательного выбора меньших элементов из обоих подмножеств и формирования единого отсортированного списка.
Временная сложность алгоритма — 0(n log n)

АНАЛИЗ АЛГОРИТМА: Сортировка Шелла (Shell Sort)
Определение: это модификация классической сортировки вставками, где сначала элементы сортируются с некоторым фиксированным шагом («gap»), а затем шаг уменьшается до единицы, превращая алгоритм в классическую сортировку вставками.
Анализ:Сортировка Шелла представляет собой усовершенствованную версию обычной сортировки вставками. Она начинается с предварительной обработки массива, проводя частичную сортировку элементов, находящихся на больших расстояниях друг от друга (шаг изначально равен половине размера массива). Затем величина шага постепенно сокращается, пока не достигнет единицы, обеспечивая эффективное распределение элементов ещё до финальной стадии полного упорядочивания методом простых вставок. 
Существуют оптимизированные варианты сортировки Шелла с лучшей временной сложностью худшего случая, достигающей 0(n(logn)^2).

АНАЛИЗ АЛГОРИТМА: Быстрая сортировка (Quick Sort)
Определение:это высокоэффективный алгоритм сортировки, использующий стратегию «разделяй и властвуй». Идея алгоритма заключается в следующем: Выбор опорного элемента, разбиение массива, рекурсия, объединение.
Анализ:Опорный элемент выбирается заранее, затем элементы массива перераспределяются так, что все значения меньше либо равные опорному располагаются слева от него, а превышающие — справа. Процесс многократно повторяется рекурсивно для левой и правой частей массива, продолжаясь до тех пор, пока весь массив не окажется полностью отсортированным.
Средняя временная сложность алгоритма — O(nlog⁡n).

АНАЛИЗ АЛГОРИТМА: Пирамидальная сортировка (Heap Sort)
Определение:это высокоэффективный алгоритм сортировки, основанный на структуре данных, называемой бинарной кучей (binary heap). Основная идея алгоритма заключается в преобразовании исходного массива в пирамиду (бинарную кучу), а затем извлечении максимального (или минимального) элемента, поддерживая структуру кучи.
Анализ:процесс заключается в построении специальной структуры данных (max-kuchy), извлечении максимальных элементов и восстановлении порядка оставшихся элементов, что позволяет эффективно отсортировать массив в возрастающем порядке.
Временная сложность алгоритма — O(nlog⁡n).

АНАЛИЗ АЛГОРИТМА: Последовательный (линейный) поиск (Linear Search)
Определение: это простой метод нахождения заданного значения в списке путем пошагового просмотра элементов вплоть до обнаружения искомого значения либо завершения проверки всего списка.
Анализ:Алгоритм прямого линейного поиска проходит по элементам массива последовательно, начиная с первого элемента и двигаясь к последнему. Во время прохода осуществляется проверка каждого элемента на предмет соответствия искомому значению. Если такое совпадение найдено, алгоритм сразу же возвращает индекс найденного элемента. В противном случае продолжается дальнейшее сравнение вплоть до окончания массива.
Средняя временная сложность остаётся O(N)

АНАЛИЗ АЛГОРИТМА: Бинарный поиск (Binary Search)
Определение: это эффективный способ поиска элемента в отсортированном массиве. Благодаря быстрому снижению размеров зоны поиска, он обладает временем работы O(logN), что делает его незаменимым инструментом в ситуациях, когда важна высокая производительность поиска.
Анализ:Его основная идея заключается в последовательном делении диапазона поиска пополам, исключая половину возможных вариантов на каждом шаге. 
Временная сложность алгоритма бинарного поиска составляет 0(log N), где N — длина массива. Это гораздо эффективнее классических методов типа простого перебора 0(N)

АНАЛИЗ АЛГОРИТМА: Интерполирующий поиск (Interpolation Search)
Определение: это улучшенная версия обычного бинарного поиска, предназначенная для быстрого нахождения элементов в больших упорядоченных наборах данных, особенно если распределение элементов равномерное. Интерполирующий поиск рассчитывает вероятную позицию искомого элемента, основываясь на характеристиках распределения данных. 
Анализ:Интерполяционный поиск определяет возможную позицию элемента, используя соотношение его значения и крайних значений массива. Эффективнее бинарного поиска при равномерном распределении данных, так как быстрее приближается к цели.
Временная сложность в лучшем случае — O(log⁡log⁡n), в худшем — O(n)

АНАЛИЗ АЛГОРИТМА: Поиск по Фибоначчи (Fibonacci Search)
Определение: это улучшенный вариант бинарного поиска, использующий числа последовательности Фибоначчи для деления области поиска. Вместо равномерного разделения диапазона пополам, как в обычном бинарном поиске, здесь используются коэффициенты из ряда Фибоначчи для выбора точки разделителя. Этот метод обеспечивает меньшую глубину рекурсии и потенциально быстрее работает на некоторых структурах данных.
Анализ: применяются числа Фибоначчи для определения промежуточных позиций в массиве, подобно бинарному поиску, но с иными пропорциями разделения. Создается специальная последовательность чисел Фибоначчи нужной длины, и путем постепенного сужения интервалов поиска, соответствующих этим числам, находится точное местоположение искомого элемента.
Средняя сложность также остается близкой к логарифмической, O(log N).
